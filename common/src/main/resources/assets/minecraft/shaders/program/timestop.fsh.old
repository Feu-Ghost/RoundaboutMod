#version 150
#extension GL_ARB_explicit_attrib_location : enable // no clue, came with the example

uniform float alphaTestRef;
uniform sampler2D DiffuseSampler;
//uniform sampler2D lightmap;
uniform int frameCounter; // timer for expanding bubbles

//in vec2 lmcoord;
in vec2 texcoord;
//in vec4 color;
in vec4 worldCoords; //world-space coordinates calculated in vertex

vec3 bubblePosition = vec3(-220, 66, 117); //hardcoded position of the bubble's origin (would be a uniform passed in by you)

// functions used for grey-scale
vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}
// end of functions used for grey-scale

/* DRAWBUFFERS:0 */
layout(location = 0) out vec4 fragColor; // output color

void main() {
    //base code
//    vec4 color = texture(DiffuseSampler, texcoord); //* color;
//    if (color.a < alphaTestRef) discard;
//    //color *= texture(lightmap, lmcoord);
//
//    // calculate two expanding spheres with differing sizes
//    float greyscale = clamp(length(worldCoords.xyz - bubblePosition) - clamp(frameCounter, 0, 100), 0., 1.); // greyscale bubble size
//    float inversion = clamp(length(worldCoords.xyz - bubblePosition) - clamp(frameCounter + 5, 0, 100), 0., 1.); // inversion bubble size
//
//    // the greyscale sphere calculations
//    vec3 theGrey = rgb2hsv(color.xyz);
//    theGrey.y *= greyscale;
//    theGrey = hsv2rgb(theGrey);
//
//    // mix the greyscale with the inverted colors to get greyscale surrounded by inverted
//    vec3 inverted = mix(theGrey, 1. - color.xyz, greyscale);
//    // then mix that with the normal colors to surround the inverted
//    color.xyz = mix(inverted, color.xyz, inversion);

    // apply effect and profit!
    fragColor = texture(DiffuseSampler, texcoord);
}