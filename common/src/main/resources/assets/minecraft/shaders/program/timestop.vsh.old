#version 150

uniform mat4 modelViewMatrix; // fundamental matrix
uniform mat4 projectionMatrix; // also a fundamental matrix (I know they exists, don't know what they actually *do*)
uniform vec2 OutSize;
//uniform mat4 textureMatrix = mat4(1.0); // uhhhhh.....
uniform vec3 chunkOffset; // used for screen-space and world-space coords
uniform vec3 cameraPosition; // used for calculating world-space coords

//in ivec2 vaUV2; // lightmap sampling coords (?)
//in vec2 UV; // texture sampling coords (?)
in vec4 Position; // vertex position
in vec4 VertexColor; // vertex color

//out vec2 lmcoord; // adjusted lightmap coords (?)
out vec2 texcoord; //adjusted texture coords (?)
//out vec4 color; // block color
out vec4 worldCoords; // world-space coords

void main() {
    // came with the example
    gl_Position = projectionMatrix * (modelViewMatrix * vec4(Position.xyz + chunkOffset, 1.0));
    texcoord = Position.xy / OutSize;//(mat4(1.0) * vec4((Position.xy / OutSize), 0.0, 1.0)).xy;
    //lmcoord = vaUV2 * (1.0 / 256.0) + (1.0 / 32.0);
    //color = VertexColor;

    //my data
    worldCoords = vec4(Position.xyz + chunkOffset + cameraPosition, 1.0);
}